@model IEnumerable<Microsoft.Teams.Apps.FAQPlusPlus.Configuration.Models.LanguageKbConfigurationViewModel>

@{

    ViewBag.Title = "Configuration App";
}

<div class="row contentMargin">
    <div id="spinner" style="display: none">
            @Html.Partial("~/Views/Shared/_Spinner.cshtml")
    </div>
    
    <!--Table header-->
    <div>        
        <div class="col-lg-1">
            <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
        </div>
        <div class="col-lg-2">
            <span>Team ID</span><span class="mandatoryField">*</span>
        </div>
        <div class="col-lg-2">
            <span>Knowledge base ID</span><span class="mandatoryField">*</span>
        </div>

        <div class="col-lg-3">
            <span>Welcome message</span><span class="mandatoryField">*</span>
        </div>

        <div class="col-lg-2">
            <span>Help tab text</span><span class="mandatoryField">*</span>
        </div>
        <div class="col-lg-2">
            <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
        </div>
    </div>
 
    <div>
        @Html.Partial("~/Views/Home/_Configuration.cshtml", Model)
    </div>
    <div class="col-lg-12 marginBetweenView"></div>
    
    <div><input type="hidden" id="languages" value="@ViewBag.Languages" /></div>
 
 </div>

<script type="text/javascript">
    $(function () {
        //Call GetBotSupportedLanguages
        var languages = $("#languages").val()
        var result = languages.split(",");
        if (result &&  result.length > 0) {        
            
            $.each(result, function (i, language) {
                $.ajax({
                    type: "GET",
                    datatype: "JSON",
                    data: {
                        'language': language
                    },
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetSavedDetailsAsync")',
                    success: function (result) {
                        if (result.data.Data != null) {
                            $("." + language + "-teamIdTextBox").val(result.data.Data.TeamId);
                            $("." + language + "-knowledgeBaseIdTextBox").val(result.data.Data.KnowledgeBaseId);
                            $("." + language + "-welcomeMessageIdTextBox").val(result.data.Data.ChangeLanguageMessageText);
                            $("." + language + "-helpTabTextIdTextBox").val(result.data.Data.HelpTabText);
                        }
                        toggleToEdit(language);                        
                    },
                    error: function (error) {                        
                        saveFailureIconAndText(language + "-StorageStatusIcon", ctry+"-StorageStatusMessage", "Unable to display team id due to HTTP: " + error.status + ", " + error.statusText);
                    }
                });
            });
        }
    });

    // Display a green tick when save is success
    function onSaveSuccess() {
        var currentFormName = $(this).closest(".formToSubmit").find(".form-group").attr("data-form-name");
        clearStatusIconAndMessage(currentFormName);
        saveSuccessIcon(currentFormName+"-StorageStatusIcon");
        toggleToEdit(currentFormName);
    }

    // Display a red cross with error text message when save is not success due to error
    function onSaveFailure(errorText) {
        var currentFormName = $(this).closest(".formToSubmit").find(".form-group").attr("data-form-name");
        clearStatusIconAndMessage(currentFormName);
        saveFailureIconAndText(currentFormName + "-StorageStatusIcon", currentFormName+"-StorageStatusMessage", errorText.statusText);
    }

    // Perform changes when Edit related UI has to be displayed
    function toggleToEdit(lang) {
        $("#"+ lang +"-SubmitButton").val("Edit");
        $("IdTextBox").attr("disabled", "disabled");
        $("." + lang + "-teamIdTextBox").attr("disabled", "disabled");
        $("." + lang + "-knowledgeBaseIdTextBox").attr("disabled", "disabled");
        $("." + lang + "-welcomeMessageIdTextBox").attr("disabled", "disabled");
        $("." + lang + "-helpTabTextIdTextBox").attr("disabled", "disabled");
    }

    // Provide the div whose icon and color needs to be changed on successful save
    function saveSuccessIcon(statusIconId) {
        $("#" + statusIconId + "").addClass("glyphicon glyphicon-ok").addClass("storageStatusIcon-success");
    }

    // Provide the div whose icon, color and text needs to be changed due to failure while save
    function saveFailureIconAndText(statusIconId, statusMessageId, errorText) {
        $("#" + statusIconId + "").addClass("glyphicon glyphicon-remove").addClass("storageStatusIcon-failure");
        $("#" + statusMessageId + "").addClass("error-message alert alert-danger").text(errorText);
    }

    // Clear icon and message
    function clearStatusIconAndMessage(section) {
        $("#"+ section+"-StorageStatusIcon").removeAttr("class");
        $("#"+ section+"-StorageStatusMessage").removeAttr("class").text("");
    }

    // Check if the button text is Edit or Ok then proceed to either form submit or disable textbox of respective section
    // such as teams or knowledgebase
    $(".toggleToEditButton").click(function () {
        var currentElement = $(this);
        var currentForm = currentElement.closest(".formToSubmit");
        if (currentElement.val() === "Edit") {
            currentForm.find(".toggleTextBox").removeAttr("disabled");
            currentElement.val("OK");
        }
        else {
            currentForm.submit();
        }
    });

    // Show spinner indicator on all AJAX calls
    $(document).ajaxSend(function () {
        $("#spinner").show();
    });

    // Hide spinner indicator when all AJAX calls stops
    $(document).ajaxStop(function () {
        $("#spinner").hide();
    });
</script>
